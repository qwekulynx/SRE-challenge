name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1. Infrastructure with Terraform
  infra:
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb
          DEBUG: 1
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack..."
          for i in {1..15}; do
            if curl -s http://localhost:4566/_localstack/health | grep '"s3": "running"'; then
              echo "LocalStack is ready!"
              break
            fi
            sleep 5
          done

      - name: Initialize Terraform
        working-directory: infra/terraform
        run: terraform init

      - name: Validate Terraform
        working-directory: infra/terraform
        run: terraform validate

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        working-directory: infra/terraform
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: tfapply
        working-directory: infra/terraform
        continue-on-error: true
        run: terraform apply -auto-approve

      - name: Verify LocalStack Resources
        run: |
          echo "ðŸ”Ž Checking resources in LocalStack..."
          aws --endpoint-url=http://localhost:4566 s3 ls || true
          aws --endpoint-url=http://localhost:4566 dynamodb list-tables || true

  
  # 2. Run Tests (CI)
  test:
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/src/requirements.txt
          pip install pytest

      - name: Run unit tests
        working-directory: app
        run: pytest -q

  
  # 3. Build & Push Docker Image
  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker image
        working-directory: app
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/prima-app
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} .
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}


  # 4. Deploy to Kubernetes with Helm
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.34.0"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "v3.15.4"

      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config

      - name: Deploy with Helm
        run: |
          helm upgrade --install prima-app ./k8s/helm-chart \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/prima-app \
            --set image.tag=latest
